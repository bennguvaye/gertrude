# -*- coding: utf-8 -*-

#    This file is part of Gertrude.
#
#    Gertrude is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    Gertrude is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Gertrude; if not, see <http://www.gnu.org/licenses/>.

from __future__ import unicode_literals
from __future__ import print_function
from facture import *
from ooffice import *

template_total_lines_count = 19
template_first_line = 4
template_lines_count = 8


class CompteExploitationModifications(object):
    def __init__(self, site, annee):
        self.multi = False
        self.template = 'Compte exploitation.ods'
        self.default_output = "Compte exploitation %d.ods" % annee
        self.site = site
        self.annee = annee
        self.errors = {}
        self.email = None
        self.row_total_semestre = [0, 0]

    def FillSemestre(self, template, semestre, handicap):
        debut = datetime.date(self.annee, semestre * 6 + 1, 1)
        if debut > today:
            return None, None
        fin = GetMonthEnd(datetime.date(self.annee, semestre * 6 + 6, 1))
        
        inscrits = list(database.creche.select_inscrits(debut, fin, self.site, handicap=handicap))
        if not inscrits:
            return None, None
        
        inscrits = GetEnfantsTriesParNom(inscrits)

        str_semestre = "%s semestre %d" % (ordinaux[semestre], self.annee)
        table = template.cloneNode(1)
        table_name = table.getAttribute("table:name").replace("<semestre>", str_semestre)
        table.setAttribute("table:name", table_name)
        lines = table.getElementsByTagName("table:table-row")
        
        # Les champs simples
        fields = [('annee', self.annee),
                  ('semestre', str_semestre)]
        if self.site:
            fields.append(('site', self.site.nom))
        for i in range(6):
            fields.append(('mois[%d]' % i, months[semestre * 6 + i]))
        ReplaceFields(lines, fields)
        
        template_header = lines[7]
        template_report = lines[8]
        template_enfant = lines[9]
        template_sous_total = lines[10]
        template_saut_page = lines[11]
        template_total = lines[12]
        
        shift = 0
        index_in_page = 0
        page = 0

        line = template_report.cloneNode(1)
        HideLine(line)
        table.insertBefore(line, template_report)
        table.removeChild(template_report)
        
        for inscrit in inscrits:
            if index_in_page == 10:
                line_sous_total = template_sous_total.cloneNode(1)
                IncrementFormulas(line_sous_total, row=-10+shift)
                table.insertBefore(line_sous_total, template_enfant)
                table.insertBefore(template_saut_page.cloneNode(1), template_enfant)
                table.insertBefore(template_header.cloneNode(1), template_enfant)
                line_report = template_report.cloneNode(1)
                IncrementFormulas(line_report, row=3+shift)
                table.insertBefore(line_report, template_enfant)
                shift += 4
                page += 1
                index_in_page = 0
            
            line = template_enfant.cloneNode(1)
            fields = GetInscritFields(inscrit)
            for i in range(6):
                mois = semestre * 6 + i + 1
                debut = datetime.date(self.annee, mois, 1)
                if inscrit.is_present(debut, GetMonthEnd(debut), self.site, handicap):
                    try:
                        facture = Facture(inscrit, self.annee, mois, NO_NUMERO)
                        heures = facture.heures_realisees
                    except Exception as e:
                        self.errors[GetPrenomNom(inscrit)] = e.errors
                        heures = 0
                else:
                    heures = 0
                fields.append(('reel[%d]' % i, heures))
            ReplaceFields(line, fields)
            IncrementFormulas(line, row=shift)
            table.insertBefore(line, template_enfant)
            shift += 1
            index_in_page += 1
        
        for i in range(index_in_page, 10):
            line = template_enfant.cloneNode(1)
            fields = [('reel[%d]' % i, 0) for i in range(6)]
            ReplaceFields(line, fields)
            IncrementFormulas(line, row=shift)
            HideLine(line)
            table.insertBefore(line, template_enfant)
            shift += 1
            
        table.removeChild(template_enfant)
        table.removeChild(template_sous_total)
        table.removeChild(template_saut_page)
        
        IncrementFormulas(template_total, row=shift-10)
        
        return table, shift+10
    
    def FillRecap(self, table, tables_normaux, tables_handicapes):
        debut = datetime.date(self.annee, 1, 1)
        fin = datetime.date(self.annee, 12, 31)
        
        nombre_enfants_non_handicapes = len(list(database.creche.select_inscrits(debut, fin, self.site, handicap=False)))
        nombre_enfants_handicapes = len(list(database.creche.select_inscrits(debut, fin, self.site, handicap=True)))
        fields = [("annee", self.annee),
                  ("date", today),
                  ("nombre-enfants-non-handicapes", nombre_enfants_non_handicapes),
                  ("nombre-enfants-handicapes", nombre_enfants_handicapes),
                  ("nombre-enfants", nombre_enfants_handicapes+nombre_enfants_non_handicapes)
                  ]
        if self.site:
            fields.append(('site', self.site.nom))
        ReplaceFields(table, fields)
        
        lines = table.getElementsByTagName("table:table-row")
        for i in range(12):
            semestre, mois = i / 6, i % 6
            line = lines[i + 10]
            if tables_normaux[semestre][1]:
                SetCellFormulaReference(GetCell(line, 1), tables_normaux[semestre][0], '%c%d' % (chr(ord('G') + mois), tables_normaux[semestre][1]))
            if tables_handicapes[semestre][1]:
                SetCellFormulaReference(GetCell(line, 5), tables_handicapes[semestre][0], '%c%d' % (chr(ord('G') + mois), tables_handicapes[semestre][1]))
    
    def execute(self, filename, dom):
        if filename == 'styles.xml':
            ReplaceTextFields(dom, GetCrecheFields(database.creche))
            return []

        elif filename == 'content.xml':
            spreadsheet = dom.getElementsByTagName('office:spreadsheet').item(0)
            tables = spreadsheet.getElementsByTagName("table:table")
            tables_normaux = []
            tables_handicapes = []
            
            # Les 2 semestres
            template = tables.item(1)
            spreadsheet.removeChild(template)
            for semestre in range(2):
                table, total = self.FillSemestre(template, semestre, handicap=False)
                tables_normaux.append((table, total))
                if table is not None:
                    spreadsheet.insertBefore(table, tables[3])

            # Les 2 semestres pour enfants handicapes
            template = tables.item(2)
            spreadsheet.removeChild(template)
            for semestre in range(2):
                table, total = self.FillSemestre(template, semestre, handicap=True)
                tables_handicapes.append((table, total))
                if table is not None:
                    spreadsheet.insertBefore(table, tables[3])
                    
            # Le recapitulatif
            template = tables.item(0)
            self.FillRecap(template, tables_normaux, tables_handicapes)

        return self.errors
